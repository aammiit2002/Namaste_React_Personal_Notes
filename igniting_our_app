# In this video we are going to see what things are used to make our app production ready
# Here we talk about the NPM
😂Fact: NPM does not stand for node package manager it is not defined even on their website.
NOTE: But yes NPM manages the packages behind the scenes.

Q) SO WHAT IS NPM ACTUALLY?📌📌📌
--> For Any package that you need to include in your project you need NPM, it maintains all the packages written in the Javascript programming language
It simplifies the process of adding, updating, and removing packages in your project.

Q) Parcel is a bundler
--> Parcel and webpack are the bundlers used mostly for JavaScript or Typescript code that help you to minify, clean, and make your code compact so 
that it becomes easier to send a request or receive a response from the server when it usually takes you to transfer multiple files without using 
any bundler to load the page of your application.

Q)What's the difference between tilde(~) and caret(^) in package.json?
--> ~version “Approximately equivalent to version”, will update you to all future patch versions, without incrementing the minor version.
 ~1.2.3 will use releases from 1.2.3 to <1.3.0.
-->^version “Compatible with version”, will update you to all future minor/patch versions, without incrementing the major version. 
^1.2.3 will use releases from 1.2.3 to <2.0.0.

Q) Package.json?
--> The package.json file is core to the Node.js ecosystem and is a fundamental part of understanding and working with Node.js, npm, and even modern JavaScript. 
This file is used as a manifest, storing information about applications, modules, packages, and more.

Q)What is package-lock.json?
In earlier versions of Node.js, the package.json file did not provide a way to lock down the specific version of each dependency that a project was using. 
This meant that when a project was deployed or shared with others, there was a risk that different developers or machines would use different versions of the same dependency, 
which could cause compatibility issues or unexpected behaviour.

package-lock.json file is like a one-stop solution to your entire problem. package-lock.json is a file that is automatically generated by npm when a package is installed. It records the exact version of every installed dependency, 
including its sub-dependencies and their versions. The purpose of package-lock.json is to ensure that the same dependencies are installed consistently across different environments, such as development and production environments. 
It also helps to prevent issues with installing different package versions, which can lead to conflicts and errors.

Q) What are Node modules?
--> This module contains all the codes that we fetched from NPM. The node modules contain the actual data of the dependencies that we are installing.

Q) Transitive Dependencies?
--> For example we download the parcel, for the parcel also has some dependencies and those dependencies also need other dependencies so everything 
that is required for the module is stored inside the Node dependencies.

NOTE: There is no need to put node modules in your git but it's absolutely necessary to put 
package.json and package-lock.json because if we have these two then we can recreate all our 
node modules.
To avoid pushing node modules to git: 
Create a .gitignore file and write /node-modules(File name that you don't want)
  
If we delete our node modules we can again recreate it by:
npm install
then it again recreates our node modules

-->>🧑‍💻🧑‍💻🧑‍💻Now to ignite our app we use npx parcel index.html: this hosts our app as a localhost:1234, we have executed the parcel now(The bundler).
NPX: To execute a package we use NPX 
NPM: To install a package we use NPM

--> NOTE: These CDN links are not a preferred way to introduce react into our project because 
it is costly as it is fetching from a website and we have to keep changing our URL for newer versions
the much-preferred way is by inserting via NPM because React is a Javascript package present in NPM at the end of the day. 
so it will be really easy and efficient to access it from our Node Modules.

-->npm i react
-->npm i react-dom
Still, that doesn't make our application run because every syntax we used in our code was coming from the CDN links but 
now to use the react from the node modules we have to import the react
import React from 'react';
this 'react' comes from the react from my node modules.
now when you run You get this error:
import React from "react";
  >   | ^^^^^^^^^^^^^^^^^^^^^^^^^^
    2 | import ReactDOM from "react-dom";
    3 | //first react code

  C:\Users\AMIT THAKUR\Desktop\Namaste React\index.html:20:5
    19 |     <script crossorigin src="https://unpkg.
  > 20 |     </script> -->
  >    |     ^^^^^^^^^^^^^^ The environment was originally created here
    21 |
    22 |     <script src="App.js"></script>

  💡 Add the type="module" attribute to the         
     <script> tag.
---> Normal script won't work you have to make your script a module

# Parcel
--> Dev Build: It is creating a Dev build for u
--> Local server: It builds a local server for us
--> HMR: Hot Module Replacement (It also automatically refreshes our page)
--> FILE WATCHING ALGO: The HMR is possible because the Parcel uses a FILE WATCHING ALGO written in C++.
--> Caching: Parcel gives us faster build because it is using Caching by creating a parcel cache.
-->Image-Optimisation: Parcel can do image optimisation for us too as loading the image is very costly.
--> Minification: If I create a production build then the parcel will minify our files.
--> Bundling
--> Compressing: Also compresses our file to decrease our size
--> Consistent Hashing
--> Code Splitting
--> Differential Bundling: To support older versions of browsers or any browser this gives us different bundles for different kinds of apps
--> Diagnostics
--> Error Handling: It gives us beautiful errors
--> PARCEL also provides us with a way to host the app on HTTPS
--> Tree shaking algo: It removes unused codes for us.


